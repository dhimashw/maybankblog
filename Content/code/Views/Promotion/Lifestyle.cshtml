@using Sitecore.Mvc
@using Sitecore.Mvc.Presentation
@using Sitecore.Foundation.Dictionary.Extensions
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Foundation.Alerts
@using Sitecore.Foundation.Alerts.Extensions
@using Sitecore.Feature.Library.Helper
@using Sitecore.Feature.Content.Controller
@model PagedData<Sitecore.Data.Items.Item>
@{
    string _penawaran = string.Empty;
    string _category = string.Empty;
    string _keyword = string.Empty;
    _penawaran = Request.QueryString[Sitecore.Feature.Library.Helper.Variables._penawaran] != null ? Request.QueryString[Sitecore.Feature.Library.Helper.Variables._penawaran].ToLower() : string.Empty;
    _category = Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category] != null ? Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category].ToLower() : string.Empty;
    _keyword = Request.QueryString[Sitecore.Feature.Library.Helper.Variables._keyword] != null ? Request.QueryString[Sitecore.Feature.Library.Helper.Variables._keyword] : string.Empty;
    int counter = 0;

    Sitecore.Data.Items.Item dataSourceItem = Sitecore.Context.Database.GetItem(Model.DataSourceID);
    IEnumerable<Sitecore.Data.Items.Item> ItemProductsPromotion = dataSourceItem.Children.Where(x => x.Template.ID == Sitecore.Feature.Library.Templates.CategoryPromotion.ID);
    IEnumerable<Sitecore.Data.Items.Item> ItemLocationPromotion = dataSourceItem.Children.Where(x => x.Template.ID == Sitecore.Feature.Library.Templates.LocationPromotion.ID);
    Sitecore.Data.Items.Item listLocation = Sitecore.Context.Database.GetItem(Sitecore.Feature.Library.Helper.Variables._itemListLocationDefault);

    if (_penawaran.ToLower() == dataSourceItem.ID.ToString().ToLower())
    {
        _penawaran = string.Empty;
    }

    List<string> oListLocation = new List<string>();
    foreach (Sitecore.Data.Items.Item locationItem in listLocation.Children)
    {
        oListLocation.Add(locationItem.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title].Value);
    }

    if (ItemLocationPromotion.FirstOrDefault() != null)
    {
        Sitecore.Data.Fields.MultilistField locationMultiList = ItemLocationPromotion.FirstOrDefault().Fields[Sitecore.Feature.Library.Templates.LocationPromotion.Fields.Location];
        if (locationMultiList.GetItems().Count() > 0)
        {
            oListLocation.Clear();
            oListLocation = locationMultiList.GetItems().Select(x => x.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title].Value).ToList();
        }
    }

    //if (ItemLocationPromotion.FirstOrDefault() != null)
    //{
    //    string[] sListLocation = ItemLocationPromotion.FirstOrDefault().Fields[Sitecore.Feature.Library.Templates.LocationPromotion.Fields.Location].Value.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
    //    if (sListLocation.Count() > 0)
    //    {
    //        oListLocation.Clear();
    //        foreach (string idLocation in sListLocation)
    //        {
    //            string location = Sitecore.Context.Database.GetItem(idLocation).Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title].Value;
    //            if (!string.IsNullOrEmpty(location))
    //            {
    //                oListLocation.Add(location);
    //            }
    //        }
    //    }
    //}

    var idDiv = Guid.NewGuid();

    string btnColor = "btn btn-tertiary addon";
    Sitecore.Data.Items.Item sourceItem = RenderingContext.Current.Rendering.Item;
    if (!string.IsNullOrWhiteSpace(sourceItem.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.ButtonColor].Value))
    {
        btnColor = Sitecore.Context.Database.GetItem(sourceItem.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.ButtonColor].Value).Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.stringTitle].ToString();
    }
}


<script type="text/javascript">

    $(document).ready(function () {

    $('body').on('click', '.pagination-list a', function () {

        var page = parseInt($(this).html());

        $.ajax({
            url: '@Url.Action("LifestyleListPaging")',
            data:
            {
                "page": page,
                "PageSize": @Model.PageSize,
                "id": "@Model.DataSourceID",
                "Keyword": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._keyword]",
                "Penawaran": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._penawaran]",
                "Category": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category]",
                "dataSourceItemID": "@RenderingContext.Current.Rendering.Item.ID"
            },
            success: function (data) {
                $("#news-pages-@idDiv").html(data);
                setTimeout(function () {
                    if ($('.card.js-demo-skeleton-content').hasClass('hide')) {
                        $('.card.js-demo-skeleton-content').removeClass('hide')
                        $('.skeleton.js-demo-skeleton').addClass('hide')
                    }
                }, 5000)
            }
        });
    });

    $('body').on('click', '.previous.enabled a', function () {
        var page = parseInt($(this).data("curpage") - 1);

        $.ajax({
            url: '@Url.Action("LifestyleListPaging")',
            data: {
                "page": page,
                "PageSize": @Model.PageSize,
                "id": "@Model.DataSourceID",
                "Keyword": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._keyword]",
                "Penawaran": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._penawaran]",
                "Category": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category]",
                "dataSourceItemID": "@RenderingContext.Current.Rendering.Item.ID"
            },
            success: function (data) {
                $("#news-pages-@idDiv").html(data);
                setTimeout(function () {
                    if ($('.card.js-demo-skeleton-content').hasClass('hide')) {
                        $('.card.js-demo-skeleton-content').removeClass('hide')
                        $('.skeleton.js-demo-skeleton').addClass('hide')
                    }
                }, 5000)
            }
        });
    });

    $('body').on('click', '.next.enabled a', function () {
        var page = parseInt($(this).data("curpage") ) + 1;

        $.ajax({
            url: '@Url.Action("LifestyleListPaging")',
            data: {
                "page": page,
                "PageSize": @Model.PageSize,
                "id": "@Model.DataSourceID",
                "Keyword": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._keyword]",
                "Penawaran": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._penawaran]",
                "Category": "@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category]",
                "dataSourceItemID": "@RenderingContext.Current.Rendering.Item.ID"
            },
            success: function (data) {
                $("#news-pages-@idDiv").html(data);
                setTimeout(function () {
                    if ($('.card.js-demo-skeleton-content').hasClass('hide')) {
                        $('.card.js-demo-skeleton-content').removeClass('hide')
                        $('.skeleton.js-demo-skeleton').addClass('hide')
                    }
                }, 5000)
            }
        });
    });
});
</script>

@{
    <div class="page-header">
        @{
            if (dataSourceItem != null)
            {
                Sitecore.Data.Items.Item itemDefault = dataSourceItem;
                if (!String.IsNullOrEmpty(_penawaran))
                {
                    itemDefault = Sitecore.Context.Database.GetItem(_penawaran);
                }
                <div class="page-banner--as-bg simpanan" style="background-image:url(@itemDefault.ImageUrl(Sitecore.Feature.Library.Templates.BaseField.Fields.Background));" alt="">
                    <div class="container">
                        <div class="page-banner-body">
                            <h1>@Html.Sitecore().Field(Sitecore.Feature.Library.Templates.BaseField.Fields.Title, itemDefault)</h1>
                            @if (String.IsNullOrEmpty(_penawaran))
                            {
                                <p>@Html.Sitecore().Field(Sitecore.Feature.Library.Templates.PromotionLayout.Fields.SummaryBanner, itemDefault)</p>
                            }
                            else
                            {
                                <p>@Html.Sitecore().Field(Sitecore.Feature.Library.Templates.BaseField.Fields.Summary, itemDefault)</p>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        @*@if (ItemProductsPromotion.FirstOrDefault() != null)
        {
            //string idDefault = ItemProductsPromotion.First().Fields[Sitecore.Feature.Library.Templates.CategoryPromotion.Fields.Category].Value;
            Sitecore.Data.Items.Item itemDefault = ItemProductsPromotion.First();
            if (!string.IsNullOrWhiteSpace(_penawaran))
            {
                //idDefault = Sitecore.Context.Database.GetItem(_penawaran).Fields[Sitecore.Feature.Library.Templates.CategoryPromotion.Fields.Category].Value;
                itemDefault = Sitecore.Context.Database.GetItem(_penawaran);
            }

            <div class="page-banner--as-bg simpanan" style="background-image:url(@itemDefault.ImageUrl(Sitecore.Feature.Library.Templates.BaseField.Fields.Background));" alt="">
                <div class="container">
                    <div class="page-banner-body">
                        <h1>@Html.Sitecore().Field(Sitecore.Feature.Library.Templates.BaseField.Fields.Title, itemDefault)</h1>
                        <p>@Html.Sitecore().Field(Sitecore.Feature.Library.Templates.BaseField.Fields.Summary, itemDefault)</p>
                    </div>
                </div>
            </div>
        }*@
    </div>
}

<div class="page-body">
    <div class="feature has-search-component">
        <div class="container">
            <div class="search-travel">
                <div class="search-travel-container">
                    <div class="search-travel-header">
                        <h2>@Html.Sitecore().Field(Sitecore.Feature.Library.Templates.BaseField.Fields.Summary, dataSourceItem)</h2>
                    </div>
                    <div class="search-travel-body">
                        <form id="search-travel">
                            <div class="row">
                                <div class="form-group col">
                                    <label class="col-title no-animation" for="location">@Html.Sitecore().Dictionary("/Feature/Promotion/Location", "Destination Location")</label>
                                    <input class="js-type-ahead form-control" type="text" name="keyword" autocomplete="off" onfocus="this.value=''" value="@_keyword" />
                                    <ul class="custom-list">
                                        @foreach (string location in oListLocation)
                                        {
                                            <li>@location</li>
                                        }
                                    </ul>
                                </div>
                                <div class="form-group col">
                                    <div class="col-title">@Html.Sitecore().Dictionary("/Feature/Promotion/Category", "Categories and offers")</div>
                                    <div class="m2u-select js-m2u-select">
                                        <select class="form-control" name="penawaran" data-label="">
                                            @if (ItemProductsPromotion.Count() > 0)
                                            {
                                                if (string.IsNullOrWhiteSpace(_penawaran))
                                                {
                                                    <option selected="selected" value="@dataSourceItem.ID" data-iditemcategory="@dataSourceItem.ID">@Html.Sitecore().Dictionary("/Feature/Promotion/All", "All")</option>
                                                }
                                                else
                                                {
                                                    <option value="@dataSourceItem.ID" data-iditemcategory="@dataSourceItem.ID">@Html.Sitecore().Dictionary("/Feature/Promotion/All", "All")</option>
                                                }

                                                foreach (Sitecore.Data.Items.Item ItemCategory in ItemProductsPromotion)
                                                {
                                                    counter++;
                                                    string idItemCategory = ItemCategory.Fields[Sitecore.Feature.Library.Templates.CategoryPromotion.Fields.Category].Value;
                                                    if (!string.IsNullOrEmpty(idItemCategory))
                                                    {
                                                        Sitecore.Data.Items.Item iValueItemCategory = Sitecore.Context.Database.GetItem(new Sitecore.Data.ID(idItemCategory));
                                                        if (_penawaran == ItemCategory.ID.ToString().ToLower())
                                                        {
                                                            <option selected="selected" value="@ItemCategory.ID" data-iditemcategory="@ItemCategory.ID">@iValueItemCategory.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title]</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@ItemCategory.ID" data-iditemcategory="@ItemCategory.ID">@iValueItemCategory.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title]</option>
                                                        }
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group col">
                                    <button class="@btnColor">
                                        @Html.Sitecore().Field(Sitecore.Feature.Library.Templates.BaseField.Fields.ButtonLabel, dataSourceItem)<img src="/assets/img/icons/arrow-right/arrow-right-363@2x.png" />
                                    </button>
                                </div>
                            </div>
                            @if (Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category] != null && Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category].Count() > 0)
                            {
                                <input type="hidden" name="category" value="@Request.QueryString[Sitecore.Feature.Library.Helper.Variables._category]" />
                            }
                        </form>
                    </div>
                </div>
            </div>
            
            <div class="feature-wrapper clearfix">
                <div class="row pb-3">
                    <div class="col">
                        <ul class="filter-tag-wrapper">
                            <li class="filter-tag-list @Html.Raw(string.IsNullOrWhiteSpace(_category)?"active":string.Empty)"><span class="myLifeStyle">@Html.Sitecore().Dictionary("/Feature/Promotion/Show All", "Show All")</span></li>
                            @{
                                counter = 0;
                                Guid idPenawaran = new Guid();
                                bool _categoryValid = Guid.TryParse(_penawaran, out idPenawaran);
                                Sitecore.Data.Items.Item _ItemCategory = Sitecore.Context.Database.GetItem(new Sitecore.Data.ID(idPenawaran));

                                if (_ItemCategory != null)
                                {
                                    Sitecore.Data.Items.Item itemProductPromotion = _ItemCategory.Children.Where(x => x.TemplateID.Equals(Sitecore.Feature.Library.Templates.ProductPromotion.ID)).FirstOrDefault();
                                    if (itemProductPromotion != null)
                                    {
                                        Sitecore.Data.Fields.MultilistField fieldProductPromotion = itemProductPromotion.Fields[Sitecore.Feature.Library.Templates.ProductPromotion.Fields.Product];
                                        foreach (Sitecore.Data.Items.Item itemProductCategory in fieldProductPromotion.GetItems())
                                        {
                                            <li class="filter-tag-list @Html.Raw(_category == itemProductCategory.ID.ToString().ToLower()?"active":string.Empty)">
                                                <span class="myLifeStyle" data-id="@itemProductCategory.ID" data-displayname="@itemProductCategory.DisplayName">
                                                    @itemProductCategory.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title]
                                                </span>
                                            </li>
                                        }
                                    }
                                }
                                else
                                {
                                    List<Sitecore.Data.Items.Item> listProductItem = new List<Sitecore.Data.Items.Item>();
                                    foreach (Sitecore.Data.Items.Item categoryPromotion in dataSourceItem.Children.Where(x => x.TemplateID == Sitecore.Feature.Library.Templates.CategoryPromotion.ID))
                                    {
                                        Sitecore.Data.Items.Item productPromotion = categoryPromotion.Children.Where(x => x.TemplateID == Sitecore.Feature.Library.Templates.ProductPromotion.ID).FirstOrDefault();
                                        Sitecore.Data.Fields.MultilistField fieldProductPromotion = productPromotion.Fields[Sitecore.Feature.Library.Templates.ProductPromotion.Fields.Product];
                                        foreach (Sitecore.Data.Items.Item selectedProductPromotion in fieldProductPromotion.GetItems())
                                        {
                                            if (!(listProductItem.Where(x => x.ID == selectedProductPromotion.ID).Count() > 0))
                                            {
                                                listProductItem.Add(selectedProductPromotion);
                                            }
                                        }
                                    }
                                    foreach (Sitecore.Data.Items.Item dataListProductItem in listProductItem.Distinct())
                                    {
                                        <li class="filter-tag-list @Html.Raw(_category == dataListProductItem.ID.ToString().ToLower()?"active":string.Empty)">
                                            <span class="myLifeStyle" data-id="@dataListProductItem.ID" data-displayname="@dataListProductItem.DisplayName">
                                                @dataListProductItem.Fields[Sitecore.Feature.Library.Templates.BaseField.Fields.Title]
                                                @*@dataListProductItem.DisplayName*@
                                            </span>
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>

                <div id="news-pages-@idDiv">
                    @Html.Partial("LifestyleListItem")
                </div>
            </div>
        </div>
    </div>
</div>


